<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: zend | IComeFromTheNet.com]]></title>
  <link href="http://icomefromthenet.github.com/blog/categories/zend/atom.xml" rel="self"/>
  <link href="http://icomefromthenet.github.com/"/>
  <updated>2012-04-13T17:57:32+10:00</updated>
  <id>http://icomefromthenet.github.com/</id>
  <author>
    <name><![CDATA[Lewis Dyer]]></name>
    <email><![CDATA[getintouch@icomefromthenet.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Email Queue and Zend: Part 1 Research]]></title>
    <link href="http://icomefromthenet.github.com/blog/2012/04/13/email-queue-and-zend-part-1-research/"/>
    <updated>2012-04-13T16:01:00+10:00</updated>
    <id>http://icomefromthenet.github.com/blog/2012/04/13/email-queue-and-zend-part-1-research</id>
    <content type="html"><![CDATA[<p>Sending email is a taks that all eventually implement. On an early attempt I did what many do for transaction emails generated and send.</p>

<p>Later on in that same project a new product was added <strong>the 28 day challenge</strong>, as the name suggest consisted of a daily email for 28 days. While not a serious challenge feature creep reared its  uguly head to incude unique emails based on affiliates. I refactored and included new code to load specific templates for each affilate.</p>

<p>A year later we are now adding new products that will send daily email and sms to clients with format customization based on the clients affilate relationship.</p>

<p>Using a dozen cron scripts to generate and send emails now hard to justify. Abstracting the sending into a message queue will simplify both new and old cron scripts.</p>

<h2>What is a queue?</h2>

<p>The two important definitions are queue as a <a href="http://en.wikipedia.org/wiki/Queue_(data_structure)">data structure</a> and queue as <a href="http://en.wikipedia.org/wiki/Message_queue">message queue</a>. I am goint to use a message queue to store each email or sms for later processing.</p>

<p>Lifecycle of a queue is easy to explain the implementation is hard and there
are many traps to fall into.</p>

<ol>
<li>A job is generate by external service</li>
<li>Job is added to the queue for later processing.</li>
<li>Service starts and asks the queue for jobs.</li>
<li>Queue response and jobs are processed.</li>
<li>Processed jobs are removed.</li>
</ol>


<p>The traps include issues of scale, error handling and persistence.</p>

<h3>Issues of Scale</h3>

<p>Key terms the number of jobs in a queue and the length of time taken by processing services.</p>

<h3>Error Handling</h3>

<h3>Persistence</h3>
]]></content>
  </entry>
  
</feed>
